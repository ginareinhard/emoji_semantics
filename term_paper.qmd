---
title: "Term paper"
subtitle: ""
author: "Rose Hörsting & Gina Reinhard"
date: "2024-09-15"
engine: knitr
bibliography: references.bib
format: 
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    embed-resources: true
link-citations: true
csl: "apa_7th.csl"
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE)

```

```{r include=FALSE}

library(checkdown)

```

#### **Chapter overview** {.unnumbered}

In this chapter, we...

```{r load-libraries, message=FALSE}

library(here)
library(tidyverse)
#install.packages("ggpubr")
library(ggpubr)

```

## Introducing the study

@fricke2024semantic \> Fricke, L., Grosz, P. G., & Scheffler, T. (2024). Semantic differences in visually similar face emojis. Language and Cognition, 1–15. \<httpsdoi:10.1017/langcog.2024.12\>.

::: {.callout-note title="How did the experiment work?"}
...

They used the face emoji annotation system developed by @fugate2021implications, Facial Action Coding System (FACS) by @ekman1978facial. FACS decomposes facial expressions into minimal Action Units (AUs) which makes the annotation of face emojis possible.

Pictorial approach @maier2023emojis vs. lexicalist approach @grosz2023semantics.

Goal: Test the predictions of the pictorial approach, i.e.: There should be a clear preference for the context-matching emoji for emoji pairs with an \[AU+\] difference. For emojis without an AU difference \[AU-\], context-matching emojis should be chosen less often (p.7)

Question: Do AU differences lead to differences in meaning between the two emojis of a pair? Hypothesis: "Small visual differences that do not correspond to AU differences ((no clear real-life counterparts)) should be semantically less relevant than visual differences that do correspond to AU differences" (4) Method: three \[AU+\] and three \[AU\] emoji pairs, rendered in WhatsApp Android version; each emoji to occur on one pair; no emojis with symbolic components (5) Task: participants must choose between emojis of a pair (Forced chocie task), help "Alex/Anna" help using the emoji that best matches the text (6)
:::

![Image from @fricke2024semantic](images/emoji_pairs.png){#fig-emojipairs fig-align="center"}

```{r import-data, message=FALSE}

raw_data <- read.csv(file = here("data", "raw_data.csv"))

```

## Data wrangling

```{r clean-data}

data <- raw_data |> 
  filter(age <= 35)

```

```{r, results=FALSE}

table(raw_data$gender)
table(raw_data$emoji_understanding)
table(raw_data$emoji_use)

```

```{r gender-count, results=FALSE}

gender_count <- data |> 
  group_by(submission_id) |> 
  count(gender)

table(gender_count$gender)

```

```{r emojiuse-count, results=FALSE}

emoji_use_count <- data |> 
  group_by(submission_id) |> 
  count(emoji_use)

table(emoji_use_count$emoji_use)

```

Create a column with the experimental conditions (AU+, AU-, and filler/control items) using a combination of str_detect, case_when and mutate:

```{r}

#delete this code chunk?

data <- data |>
  mutate(AU_difference = case_when(str_detect(name, "AU") ~ "yes",
                                   str_detect(name, "N") ~ "no",
                                   str_detect(name, "filler") ~ "filler",
                                   .default = NULL))

table(data$AU_difference)

```

Filter out filler emojis:

```{r}

#data <- data |>
#  filter(AU_difference != "filler")

# alternative (if code chunk above is deleted): 
#data <- data |> 
#  filter(!str_detect(name, "filler"))

```

Define contexts using a combination of str_detect, case_when and mutate (and check output with table()):

```{r}

data <- data |> 
  mutate(context = case_when(str_detect(question, "freut sich") ~ "happiness",
                             str_detect(question, "lacht") ~ "(cheeky) laughter",

                             str_detect(question, "macht sich Sorgen") ~ "concern",
                             str_detect(question, "ist überrascht") ~ "surprise",
                             str_detect(question, "ist etwas genervt") ~ "mild irritation",
                             str_detect(question, "ärgert sich") ~ "annoyance",
                             str_detect(question, "amüsiert sich") ~ "amusement",
                             str_detect(question, "ist überglücklich") ~ "(intense) happiness",
                             str_detect(question, "ist enttäuscht") ~ "mild disappointment",
                             #str_detect(question, "ist enttäuscht") ~ "moderate disappointment",
                             str_detect(question, "ist gut gelaunt") ~ "happiness2", #called this "happiness2" for now
                             str_detect(question, "ist verlegen") ~ "bashfulness",
                                   .default = NULL))

table(data$context)

```

Problem: emoji pair "slightly frowning face" and "frowning face" with the same question/context "ist enttäuscht". This is only resolvable using/citing the information from the original analysis script? (meaning of N-36 = "mild disappointment", meaning of N-37 = "moderate disappointment")

```{r}

data <- data |> 
  mutate(context = case_when(
                             str_detect(name, "N-36") ~ "mild disappointment",
                             str_detect(name, "N-37") ~ "moderate disappointment",
                                   .default = context))

table(data$context)

```

Define matches:

```{r}

data <- data |> 
  mutate(
  match = case_when( #called it match for now, potentially the only match column needed?
    context == "happiness" & response == "grinning_face_with_big_eyes" ~ "yes",
    context == "(cheeky) laughter" & response == "grinning_squinting_face" ~ "yes",
    context == "concern" & response == "hushed_face" ~ "yes",
    context == "surprise" & response == "astonished_face" ~ "yes",
    context == "mild irritation" & response == "neutral_face" ~ "yes",
    context == "annoyance" & response == "expressionless_face" ~ "yes",
    context == "amusement" & response == "grinning_face_with_smiling_eyes" ~ "yes",
    context == "(intense) happiness" & response == "beaming_face_with_smiling_eyes" ~ "yes",
    context == "mild disappointment" & response == "slightly_frowning_face" ~ "yes",
    context == "moderate disappointment" & response == "frowning_face" ~ "yes",
    context == "happiness2" & response == "smiling_face_with_smiling_eyes" ~ "yes",
    context == "bashfulness" & response == "smiling_face" ~ "yes",
    .default = "no"))

```

## Data analysis/visualisation

### Descriptive statistics

### Walkthrough bar plot

Plot emoji use frequencies as barplot with ggplot:

```{r}
#delete this code chunk?
ggplot(emoji_use_count, mapping = aes(x = emoji_use)) + 
  geom_bar()

```

Reorder levels of factor "emoji_use":

```{r plot-emojiuse}
#delete this code chunk?
emoji_use_count <- emoji_use_count |> 
  mutate(emoji_use = factor(emoji_use, levels = c("nie", "selten", "gelegentlich", "oft", "in fast jeder Nachricht")))

```

Plot with ordered levels:

```{r}
#delete this code chunk?
ggplot(emoji_use_count, mapping = aes(x = emoji_use)) + 
  geom_bar()

```

Plot self-reported emoji understanding by gender (male and female), relative frequencies:

```{r}
#move code chunk to data wrangling part
gender_understanding_count <- data |> 
  filter(gender != "divers") |>
  mutate(gender = recode(gender, "männlich" = "men", "weiblich" = "women")) |>
    mutate(emoji_understanding = recode(emoji_understanding, "mittelmäßig" = "moderate", "eher gut" = "rather good", "gut" = "good", "sehr gut" = "very good")) |>
    mutate(emoji_understanding = factor(emoji_understanding, levels = c("moderate", "rather good", "good", "very good"))) |> 
  group_by(gender) |> 
  count(gender, emoji_understanding) |> 
  mutate(absolute = n/24, #24 rows per participant/submission_id (calculate more elegantly?)
         total = sum(absolute), 
         percentage = (absolute/total) * 100)

```

```{r}

ggplot(gender_understanding_count, aes(x = emoji_understanding, y = percentage, fill = gender)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Self-reported Emoji Understanding by Gender",
       x = "Emoji understanding",
       y = "Percent") +
  scale_fill_brewer(palette = "Set1")

```

```{r match count}

data |> #simple barplot showing that matches occurred more often than no matches
  ggplot(aes(x = match)) +
  geom_bar()

match_count <- data |> 
  group_by(match) |> 
  count()

#   match     n
#   <chr>  <int>
# 1 no       583
# 2 yes     1325

```

```{r plot match x emoji use}
#trying to see whether there is a correlation of emoji use and matching accuracy
match_use_count <- data |> 
  group_by(match, emoji_use) |> 
  count()

match_use_count |> 
  group_by(emoji_use) |> 
  ggplot(aes(x = emoji_use, y = n, fill = match)) +
  geom_bar(stat = "identity", position = "dodge") + #better with position = "dodge" or default position = "stack"?
  labs(x = "Use frequency", y = "count")
#there seem to be considerable differences between values

match_use_count |> 
  ggplot(aes(x = emoji_use, y = n, fill = match)) + 
  geom_bar(stat = "identity", show.legend = TRUE, position = "fill") +
  scale_fill_brewer(palette="Set1")+
  labs(title = "Do participants that use emojis less frequently have a lower matching accuracy?",
       x = "Use frequency",
       y = "Ratio")+
  coord_flip()

#the plot does not really look meaningful, i.e. there is not a real difference when scaled up to 100%

```

```{r AU difference , matching rates, context}
perc_AU_diff <- data |> 
filter(AU_difference != "filler") |> 
count(context, match) %>%
mutate(percent_col = round(n/sum(n)*100, 2)) %>%
group_by(context) %>%
mutate(percent = round(n/sum(n)*100, 2)) #not sure what I´m doing here but it works to calculate the correct percentages within context groups, copy and pasted (and slightly adjusted) from: https://stackoverflow.com/questions/61308768/ggplot2-add-labels-to-percentage-plot-not-position-fill-but-just-fill

### ignore ###
# #plot AU+ pairs: context pairs AU+ concern - surprise; general happiness - hearty (cheeky) laughter; mild_irritation - annoyance;
# plot_AU_plus <- perc_AU_diff |> 
# filter(AU_difference == "yes") |> 
# mutate(context = factor(context, levels = c("concern", "surprise", "happiness", "(cheeky) laughter", "mild irritation", "annoyance"))) |> 
# ggplot(aes(x = context, y = percentage, fill = match)) +
# geom_bar(stat = "identity", position = "fill") +
# theme_minimal()
# 
# #plot AU- pairs: context pairs AU- mild disappointment - moderate disappointment, amusement - overhappy (intense happiness), happiness(2) - bashfulness
# plot_AU_minus <- perc_AU_diff |> 
# filter(AU_difference == "no") |> 
# mutate(context = factor(context, levels = c("mild disappointment", "moderate disappointment", "amusement", "(intense) happiness", "happiness2", "bashfulness"))) |> 
# ggplot(aes(x = context, y = percentage, fill = match)) +
# geom_bar(stat = "identity", position = "fill") +
# theme_minimal()
# 
# #package "ggpubr" needed:
# ggarrange(plot_AU_plus, plot_AU_minus,
#                     labels = c("AU+ condition", "AU- condition"),
#                     common.legend = TRUE, legend = "right",
#                     ncol = 1, nrow = 2)

#problem: I cannot figure out how to group the context pairs together so that it is clear what should be compared, solution: similar to Fricke et al.: make a plot for each pair and put it all together? I.e. 3 plots for AU+ and 3 plots for AU-

#AU+ condition:
#concern - surprise
plot_concern_surprise <- perc_AU_diff |> 
filter(context == "concern" | context == "surprise") |> 
ggplot(aes(x = context, y = percent_col, fill = match)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(aes(label = percent), position = position_fill(vjust = 0.5)) +
labs (x= "", y = "", title = "😯 😲") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))

#happiness - (cheeky) laughter
plot_happiness_cheeky <- perc_AU_diff |> 
filter(context == "happiness" | context == "(cheeky) laughter") |> #happiness = general happiness
ggplot(aes(x = context, y = percent_col, fill = match)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(aes(label = percent), position = position_fill(vjust = 0.5)) +
labs(x = "", y = "", title = "😃 😆")+
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))

#mild irritation - annoyance
plot_mild_irr_annoyance <- perc_AU_diff |> 
filter(context == "mild irritation" | context == "annoyance") |> 
ggplot(aes(x = context, y = percent_col, fill = match)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(aes(label = percent), position = position_fill(vjust = 0.5)) +
labs(x = "", y = "", title = "😐 😑") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))

#AU- condition:
#mild disappointment - moderate disappointment
plot_mild_disapp_mod_dissap <- perc_AU_diff |> 
filter(context == "mild disappointment" | context == "moderate disappointment") |> 
ggplot(aes(x = context, y = percent_col, fill = match)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(aes(label = percent), position = position_fill(vjust = 0.5)) +
labs(x = "", y = "", title = "🙁️ ☹️")+
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))

#amusement - (intense) happiness
plot_amusement_int_happiness <- perc_AU_diff |> 
filter(context == "amusement" | context == "(intense) happiness") |> #intense happiness = overhappy
ggplot(aes(x = context, y = percent_col, fill = match)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(aes(label = percent), position = position_fill(vjust = 0.5)) +
labs(x = "", y = "", title = "😄 😁") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))

#happiness2 - bashfulness
plot_happiness2_bashfulness <- perc_AU_diff |> 
filter(context == "happiness2" | context == "bashfulness") |> 
ggplot(aes(x = context, y = percent_col, fill = match)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(aes(label = percent), position = position_fill(vjust = 0.5)) +
labs(x = "", y = "", title = "😊 ☺️") + 
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))

#arrange all AU+ conditions together in one plot
AU_plus <- ggarrange(plot_concern_surprise, plot_happiness_cheeky, plot_mild_irr_annoyance,
labels = "AU+ condition",
legend = "none",
nrow = 1, ncol = 3)

#arrange all AU-conditions together in one plot
AU_minus <- ggarrange(plot_mild_disapp_mod_dissap, plot_amusement_int_happiness, plot_happiness2_bashfulness,
labels = "AU- condition",
common.legend = TRUE, legend = "top", 
nrow = 1, ncol = 3)

AU_combined <- ggarrange(AU_plus, AU_minus,
common.legend = TRUE, 
nrow = 2)

AU_combined <- annotate_figure(AU_combined, #also a function of the "ggpubr" package
top = text_grob("AU differences for individual contexts"),
left = text_grob("percentages", rot = 90),
bottom = text_grob("context"))

AU_combined
### proposals what to change when editing###
# geom_col is the same as geom_bar(stat = "identity"), maybe more elegant? Or more complicated for textbook readers?
#make context names consistent with the paper, so that happiness => general_happiness, (intense) happiness => overhappy, happiness2 => happiness, cheeky_laughter = hearty laughter
#optional: better title
#optional, if necessary: order of emojis, order of bars
#optional: colours
#optional: legend "match/ no match" instead of "match: no/ yes"  --> maybe more easily readable?
```

::: callout-tip
#### Quiz time! {.unnumbered}

1\) Test question?

```{r echo=FALSE, results="asis"}

check_question("D", options = c("A", "B", "C", "D", "E"), type = "radio", 
random_answer_order = TRUE,
button_label = "Check answer", q_id = 4,
right = "Test right!",
wrong = "Test incorrect.")

```
:::

## Inserting emojis in R

😁

## Conclusion

## References
